#! /usr/local/bin/node

var fs = require('fs');
var path = require('path');

var VCS = '.myvcs';
var CWD = process.cwd();
var LOG = path.join(VCS, 'log');
var HEAD = path.join(VCS, 'head');
var USAGE = [
  'Usage',
  '=====',
  'myvcs backup [-m <msg>] # Creates a new backup for current directory in .myvcs',
  'myvcs checkout n        # Reverts current directory to backup .myvcs',
  'myvcs latest            # Reverts current directory to latest backup',
  'myvcs current           # Prints the number of the current backup',
  'myvcs log               # Prints a list of backups and their creation dates and messages'
].join('\n');

// Creates VCS directory, head and log files
if (!fs.existsSync(VCS)) {
  fs.mkdirSync(VCS);
  fs.writeFileSync(HEAD, '');
  fs.writeFileSync(LOG, '[]');
}

// Creates a new backup
function backup(message) {
  // Copy current directory into numbered VCS backup directory
  fs.mkdir(nextBackup());
  cpdir(CWD, latestBackup(), { cpTopLevel: true });

  // Log backup creation with message
  message = message || '[No message]';
  writeLog(message);

  // Set head to current backup
  setHead(latestIndex());
}

// Restores contents of current directory to that of backup n
function checkout(n) {
  if (!n) throw new Error('Checkout number not provided');

  // Get the path for backup n
  var backup = path.join(CWD, VCS, n.toString(), path.basename(CWD));

  // Clear current directory and copy contents of the backup
  cleardir(CWD);
  cpdir(backup, CWD);

  // Set head to current backup
  setHead(n);
}

// Returns the number of the current backup (head)
function current() {
  var data = fs.readFileSync(HEAD, { encoding: 'utf8' });
  return data;
}

/**
 * Copying files and directories
 */

// Copies a file
function cpFile(fIn, fOut) {
  var data = fs.readFileSync(fIn, { encoding: 'utf8' });
  fs.writeFileSync(fOut, data);
}

// Copies a directory
function cpdir(dIn, dOut, options) {
  options = options || {};
  console.log('Copying contents:', dIn);

  // Copy the top level directory dIn to dOut
  if (options.cpTopLevel === true) {
    var dOut = path.join(dOut, path.basename(dIn));
    fs.mkdirSync(dOut);
  }

  var ls = fs.readdirSync(dIn);
  ls.forEach(function(file) {
    // Skip the VCS directory
    if (file === VCS) return;

    var fIn = path.join(dIn, file);
    var fOut = path.join(dOut, file);
    var stats = fs.lstatSync(fIn);

    if (stats.isDirectory()) {
      // Recursively copy subdirectories
      fs.mkdirSync(fOut);
      cpdir(fIn, fOut);
    } else if (stats.isFile()) {
      console.log('Copying file:', fIn);
      cpFile(fIn, fOut);
    }
  });
}

/**
 * Logging backups
 */

// Reads log file
function readLog() {
  return fs.readFileSync(LOG, { encoding: 'utf8' });
}

// Parses log file
function parseLog() {
  return JSON.parse(readLog());
}

// Writes backup information to log file with message
function writeLog(message) {
  var data = {
    backup:  latestIndex(),
    parent:  current(),
    date:    new Date(),
    message: message
  };
  appendLogTop(data);
}

// Appends data to top of log file
function appendLogTop(data) {
  var logData = fs.readFileSync(LOG, { encoding: 'utf8' });
  var json = JSON.parse(logData);
  json.unshift(data);
  fs.writeFileSync(LOG, JSON.stringify(json));
}

// Prints log
function printLog() {
  var backupList = parseLog();
  for (var b in backupList) {
    var backup  = 'Backup:  ' + backupList[b].backup;
    var date    = 'Date:    ' + backupList[b].date;
    var message = 'Message: ' + backupList[b].message;
    console.log([backup, date, message].join('\n'));
    console.log();
  }
}

/**
 * Clearing directories
 */

function cleardir(dir) {
  function dirFn(filepath) { fs.rmdirSync(filepath); }
  function fileFn(filepath) { fs.unlinkSync(filepath); }
  traverseWith(dir, dirFn, fileFn, { post: true });
}

/**
 * Traversing directory tree, applying dirFn and fileFn
 */

function traverseWith(dir, dirFn, fileFn, options) {
  options = options || {};
  var ls = fs.readdirSync(dir);

  ls.forEach(function(file) {
    if (file === VCS) return;
    var filepath = path.join(dir, file);
    var stats = fs.lstatSync(filepath);

    if (stats.isDirectory()) {
      if (options.pre === true) {
        dirFn(filepath);
      }
      traverseWith(filepath, dirFn, fileFn, options);
      if (options.post === true) {
        dirFn(filepath);
      }
    } else if (stats.isFile()) {
      fileFn(filepath);
    }
  });
}

/**
 * Backup helpers
 */

function latestIndex() {
  return fs.readdirSync(VCS).length - 2;
}

function latestBackup() {
  return path.join(CWD, VCS, latestIndex().toString());
}

function nextBackup() {
  return path.join(CWD, VCS, (latestIndex() + 1).toString());
}

function setHead(n) {
  fs.writeFileSync(HEAD, n);
}

/**
 * Command line processing
 */

var args = process.argv.slice(2);
switch (args[0]) {
  case 'backup':
    var message = args[2];
    backup(message);
    break;
  case 'checkout':
    checkout(args[1]);
    break;
  case 'latest':
    checkout(latestIndex());
    break;
  case 'current':
    console.log(current());
    break;
  case 'log':
    printLog();
    break;
  default:
    console.log(USAGE);
}
